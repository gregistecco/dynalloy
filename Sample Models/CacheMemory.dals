sig Addr { }
sig Data { }

sig Memory {
 addrs : set Addr,
 map : addrs -> one Data
}

sig MainMemory extends Memory { }

sig Cache extends Memory {
 dirty : set addrs
}

 sig System {
 cache : Cache,
 main : MainMemory
}

action Write[m : Memory, d : Data, a : Addr]{
	pre{}
	post{m'.map = m.map ++ (a -> d)}
}

action SysWrite[s : System]{
	pre{}
	post{some d: Data, a: Addr |
	s'.cache.map = s.cache.map ++ (a-> d) and 
	s'.cache.dirty = s.cache.dirty + a and 
	s'.main = s.main}
}

action SysFlush[s: System, x : set Addr]{
	pre{x in s.cache.addrs}
	post{
	s'.cache.map = s.cache.map - x->Data and
	s'.cache.dirty = s.cache.dirty - x and
	s'.main.map = s.main.map ++ {a: x, d: Data | d = s.cache.map[a]}}
}

pred DirtyInv[s: System] {
 all a: s.cache.addrs - s.cache.dirty | 
	s.cache.map[a] = s.main.map[a]
}

pred Init [s: System]{
 no s.cache.dirty
 no s.cache.map
 no s.main.map
}

assertCorrectness DirtyInvAssertionDynAlloy[s : System, x : set Addr] {
     pre{DirtyInv[s] and Init[s]}
     program{   
	(SysWrite[s] + SysFlush[s,x])*
    }
     post{DirtyInv[s']}
}

check DirtyInvAssertionDynAlloy for 4 lurs 10

pred freshDir [s: System] {
	some a : Addr { all d : Data {
		! ((a -> d) in s.main.map) &&
		! ((a -> d) in s.cache.map)
		}
	}
}

assert FreshDirAssertionDynAlloy  [s : System, x : set Addr]{
    pre{Init[s]}
    program {
	(SysWrite[s] + SysFlush[s, x])*
	}
    post{freshDir[s']}
}

check FreshDirAssertionDynAlloy for 4 lurs 5

assert CacheInMain[s : System, x : set Addr] {
	pre{Init[s]}
	program{
		(SysWrite[s] + SysFlush[s, x])*
	}
	post{no s'.cache.dirty => s'.cache.map in s'.main.map}
}

check CacheInMain for 4 lurs 10
