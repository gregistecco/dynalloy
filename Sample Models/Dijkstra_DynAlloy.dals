module examples/algorithms/dijkstra

/*
 * Models how mutexes are grabbed and released by processes, and
 * how Dijkstra's mutex ordering criterion can prevent deadlocks.
 *
 * For a detailed description, see:
 *   E. W. Dijkstra, Cooperating sequential processes. Technological
 *   University, Eindhoven, The Netherlands, September 1965.
 *   Reprinted in Programming Languages, F. Genuys, Ed., Academic
 *   Press, New York, 1968, 43-112.
 *
 * Acknowledgements to Ulrich Geilmann for finding and fixing a bug
 * in the GrabMutex predicate.
 *   
 */

open util/ordering [Mutex] as mo

sig Process {}

sig Mutex {}

pred Initial[holds, waits: Process -> Mutex] { no holds + waits }

pred IsFree [holds: Process -> Mutex, m: Mutex] {
   // no process holds this mutex
   no m.~(holds)
}

pred IsStalled [waits: Process -> Mutex, p: Process] { some p.(waits) }

action chooseMutex[m: Mutex]{
	pre{}
	post{one m'}
}

action chooseProcess[p: Process]{
	pre{}
	post{one p'}
}

action addHold[holds, waits: Process -> Mutex, p: Process, m: Mutex]{
	pre{}
	post{(holds' = holds + (p -> m)) and (waits' = waits - (p -> Mutex))}
}

action addWait[waits: Process -> Mutex, p: Process, m: Mutex]{
	pre{}
	post{waits' = waits + (p ->m)}
}

pred largerThanHeld[holds: Process -> Mutex, p: Process, m: Mutex]{
	all mm: (p.holds) | mo/lt[mm,m]
}

program GrabMutex[holds, waits: Process -> Mutex, p: Process, m: Mutex] {
	[!IsStalled[waits, p]]?;
	[m !in p.holds and largerThanHeld[holds, p, m]]?;
	if (IsFree[holds, m]) {
		addHold[holds, waits, p, m]
	}else{
		addWait[waits, p, m]
	}
}

action delHold[holds, waits: Process -> Mutex, p: Process, m: Mutex]{
	pre{}
	post{(holds' = holds - (p -> m)) and (waits' = waits - (p -> Mutex))}
}

action freeM[holds, waits: Process -> Mutex, m: Mutex]{
	pre{}
	post{(holds' = holds - (Process -> m)) and (waits' = waits - (Process -> m))}
}

action takeLucky[holds, waits: Process -> Mutex, m: Mutex, lucky: Process]{
	pre{}
	post{(waits' = waits - (lucky -> m)) and (holds' = holds + (lucky -> m))}
}

program ReleaseMutex [holds, waits: Process -> Mutex, p: Process, m: Mutex] var [lucky: Process]{
	[!IsStalled[waits, p]]?;
	[m in p.holds]?;
	delHold[holds, waits, p, m];
	if (no m.~waits) {
		freeM[holds, waits, m]
	}else{
		chooseProcess[lucky];
		[lucky in m.~waits]?;
		takeLucky[holds, waits, m, lucky]
	}
}

program GrabOrRelease[holds, waits: Process -> Mutex] var [p: Process, m: Mutex]{
	
	((chooseProcess[p];
	chooseMutex[m];
	 call GrabMutex[holds, waits, p, m]) + 
	(chooseProcess[p];
	chooseMutex[m];
	call ReleaseMutex[holds, waits, p, m]) + skip)*
}

run GrabOrRelease

pred Deadlock [waits: Process -> Mutex] {
         all p: Process | some p.waits
}

assertCorrectness DijkstraPreventsDeadlocks[holds, waits: Process -> Mutex]{
pre {Initial[holds, waits]}
program { call GrabOrRelease[holds, waits]}
post{! Deadlock[waits']}
}

check DijkstraPreventsDeadlocks for 3 Process, 2 Mutex lurs 10
check DijkstraPreventsDeadlocks for 4 Process, 3 Mutex lurs 10
check DijkstraPreventsDeadlocks for 5 Process, 4 Mutex lurs 10
