module examples/case_studies/firewire

/*
 * A model of leader election in the Firewire protocol.
 *
 * Adapted from:
 *   [DG+01] M.C.A. Devillers, W.O.D. GriAEoen, J.M.T Romijn, and F.W. Vaandrager.
 *   Verification of a leader election protocol -- formal methods applied to IEEE
 *   1394. Technical Report CSI-R9728, Computing Science Institute, University of
 *   Nijmegen, December 1997. Also, Formal Methods in System Design, 2001.
 *
 * This model describes a leader election protocol used in Firewire, an IEEE
 * standard for connecting consumer electronic devices. The model is a
 * straightforward translation into Alloy of a model [DG+01] developed in Lynch's
 * IO Automata which has been analyzed using PVS, a theorem prover, but which, as
 * far as we know, has not been subjected to fully automatic analysis. We are able
 * to express the key correctness property -- that exactly one leader is elected
 * -- more directly, as a trace property rather than a refinement property, and
 * can check it without the need for the 15 invariants used in the more
 * traditional proof. And the analysis does not hardwire
 * a particular topology, so would be tricky to do with a standard model checker.
 *
 * Original version author: Daniel Jackson
 * visualization: Robert Seater
 */


abstract sig Msg {}
one sig Req, Ack extends Msg {}

sig Node {to, from: set Link} {
  to = {x: Link | x.target = this}
  from = {x: Link | x.source = this}
  }

sig Link {target, source: Node, reverse: Link} {
  reverse.@source = target
  reverse.@target = source
  }

sig Waiting, Active, Contending, Elected extends Node{}

/**
 * at most one link between a pair of nodes in a given direction
 */
fact {no x,y: Link | x!=y && x.source = y.source && x.target = y.target}

/**
 * topology is tree-like: acyclic when viewed as an undirected graph
 */
fact Topology {
some tree: Node lone -> Node, root: Node {
  Node in root.*tree
  no ^tree & iden & Node->Node
  tree + ~tree = ~source.target
  }
}

sig Op {}
one sig Init, AssignParent, ReadReqOrAck, Elect, WriteReqOrAck,
ResolveContention, Stutter extends Op {}

action choose[op : Op]{
	pre{}
	post{some op'}
}

/*program Trans [parentLinks : set Link, queue : Link -> one Queue, op : Op] var [n : Node]{
  [op != Init]?;
  if (op = Stutter) {skip};
  if (op = AssignParent) {
    call assParent[queue, parentLinks]
  };
  if (op = ReadReqOrAck) {
    call ReadReqorAck[queue]
  };
  if (op = Elect){
    call Elected[parentLinks]
  };
  if (op = WriteReqOrAck) {
    call WriteReqorAck[queue, parentLinks]
  };
  if (op = ResolveContention) {
    call ResolveContent[parentLinks]
  }
}*/

program Trans [parentLinks : set Link, queue : Link -> one Queue, op : Op]{
	[op != Init]?;
	(
		(call stutter[op]) + 
		(call assParent[queue, parentLinks, op]) + 
		(call ReadReqorAck[queue, op]) + 
		(call Elected[parentLinks, op]) +
		(call WriteReqorAck[queue, parentLinks, op]) +
		(call ResolveContent[parentLinks, op])
	)
}

program stutter [op : Op]{
	[op = Stutter]?;
	skip
}

program assParent[queue :  Link -> one Queue, parentLinks : set Link, op : Op] var [x : Link] {
	[op = AssignParent]?;
	[x.target in Waiting]?;
	[!IsEmptyQueue[queue, x]]?;
	parentLinks := parentLinks + x;
	ReadQueue[queue, x]
}

program ReadReqorAck [queue : Link -> one Queue, op : Op] var [x : Link]{
	[op = ReadReqOrAck]?;
	[x.target in ((Active + Contending) & (PeekQueue [queue, x, Ack] => Contending else Active))]?;
	[!IsEmptyQueue[queue, x]]?;
	ReadQueue[queue, x]
}


program Elected[parentLinks : set Link, op : Op] var [n : Node]{
	[op = Elect]?;
	elect[n];
	[n.to in parentLinks]?
}

action elect[n : Node]{
	pre{n in Active}
	post{n' in Elected}
}

pred aux[n : Node, parentLinks : set Link, queue : Link -> one Queue]{
all x: n.from |  let msg = (x.reverse in parentLinks => Ack else Req) | WriteQueue [queue, x, msg]
}

program WriteReqorAck [queue : Link -> one Queue, parentLinks : set Link, op : Op] var [n : Node, msg : Msg]{
	[op = WriteReqOrAck]?;
	[n in Waiting]?;
	[lone n.to - parentLinks]?;
	[aux[n, parentLinks, queue]]?;
	[n in Active]?
}


program ResolveContent [parentLinks : set Link, op : Op] var [x : Link] {
	[op = ResolveContention]?;
	content[x];
	parentLinks := parentLinks + x
}

act content[x : Link]{
	pre{x.(source + target) in Contending}
	post{x'.(source + target) in Active}
}

sig Queue {slot: lone Msg, overflow: lone Msg}

pred SameQueue [q, q1: Queue] {
    q.slot = q1.slot && q.overflow = q1.overflow
  }


action ReadQueue [queue : Link -> one Queue, x : Link]{
	pre{}
	post{no queue'[x].(slot + overflow)}
}

pred PeekQueue [queue: Link -> one Queue, x: Link, m: Msg] {
  m = queue[x].slot
  }

pred WriteQueue [queue : Link -> one Queue, x : Link, m : Msg]{
	let q = queue[x] | no queue[x].slot => (q.slot = m && no q.overflow) else some q.overflow
}

pred IsEmptyQueue [queue : Link -> one Queue, x: Link] {
  no queue[x].(slot + overflow)
}

pred Initialization [op : Op, parentLinks : set Link, queue : Link -> one Queue]{
	op = Init
	Node in Waiting
	no parentLinks
	all x : Link | IsEmptyQueue[queue, x]
}

//AtMostOneElected
assertCorrectness AtMostOneElected[parentLinks : set Link, queue : Link -> one Queue, op : Op]{
	pre {Initialization[op, parentLinks, queue]}
	program {
		(choose[op]; call Trans[parentLinks, queue, op]) *
	}
	post {lone Elected}
}

//AtMostOneElected
check AtMostOneElected for 7 Op, 2 Msg,
  3 Node, 6 Link, 3 Queue 


check AtMostOneElected for 4 lurs 10
check AtMostOneElected for 5 lurs 10
check AtMostOneElected for 6 lurs 10


//OneEventuallyElected
assertCorrectness OneEventuallyElected [parentLinks : set Link, queue : Link -> one Queue, op : Op]{
	pre{Initialization[op, parentLinks, queue]}
	program{
		(choose[op]; call Trans[parentLinks, queue, op]) *
	}
	post{some Elected}
}

//OneEventuallyElected
check OneEventuallyElected for 7 Op, 2 Msg, 3 Node, 6 Link, 6 Queue lurs 10

check OneEventuallyElected for 4 lurs 10
check OneEventuallyElected for 5 lurs 10
check OneEventuallyElected for 6 lurs 10

assertCorrectness NoOverflow [parentLinks : set Link, queue : Link -> one Queue, op : Op] {
	pre{Initialization[op, parentLinks, queue]}
	program{
		(choose[op]; call Trans[parentLinks, queue, op]) *
	}
	post{all x : Link | no queue[x].overflow}
}

check NoOverflow for 7 Op, 2 Msg, 3 Node, 6 Link, 5 Queue lurs 10

check NoOverflow for 4 lurs 10
check NoOverflow for 5 lurs 10
check NoOverflow for 6 lurs 10
