module examples/hotel

/*
 * Most hotels now issue disposable room keys; 
 * when you check out, you can take your key with you.
 * How, then, can the hotel prevent you from reentering your room 
 * after it has been assigned to someone else?.  
 * The idea is that the hotel issues a new key to the next occupant, 
 * which recodes the lock, so that previous keys will no longer work.
 * the lock is opened either by the current key combination, or by its successor; 
 * if a key with the successor is inserted, the successor is made to be the current 
 * combination, so that the old combination will no longer be accepted.
 *
 *	Original version is in Alloy in the book: 
 * "Software Abstractions. Logic, Language, and Analysis." (Daniel Jackson 2006).
 */

open util/ordering[Key] as ko
open util/boolean


/**
 * The Key refers to the key combinations.
*/
sig Key {}


/**
 *The room has a set of keys,
 */
sig Room {
        keys: set Key
        }

/**
 * Signature that represent the Guest.
 */
sig Guest {
        }

fact DisjointKeySets {
        -- each key belongs to at most one room
        Room<:keys   in   Room lone-> Key
        }

/**
 * Function that given a set of key and a key, returns the next smallest key of the set.
 */
fun nextKey [k: Key, ks: set Key]: set Key {
        min [k.nexts & ks]
        }

/**
 * In the initial state, no guests hold keys, there are not rooms occupied, 
 * and each room’s key is synchronized with the current combination of the lock
 */
pred init[currentKey: Room -> one Key,
                                        lastKey: Room -> one Key,
                                        occupant: Room -> lone Guest,
                                        guestKeys: Guest -> set Key] {
        no guestKeys
        no occupant
        (all r: Room | r. lastKey = r.currentKey and r.currentKey in r.keys)
}

/**
 * Atomic action that consists in the entry of a guest in one room.
 * If the key of the card matches the lock’s current key then the lock is unchanged, or if
 * matches its succesor, in which case the lock is advanced.
 * This action checks that no unauthorized entry occurs.
 */
act entry[g: Guest,
                                        r: Room,
                                        k: Key,
                                        currentKey: Room -> Key,
                                        occupant: Room -> Guest,
                                        guestKeys: Guest -> set Key,
                                        prop: Bool] {
        pre { k in g.guestKeys and (k = r.currentKey or k = nextKey[r.currentKey, r.keys]) }
        post {
                (k = r.currentKey implies currentKey' = currentKey)
                (k = nextKey[r.currentKey, r.keys] implies currentKey' = currentKey ++ (r->k))
                prop' = (not noBadEntry[g, r, occupant] => False else prop)
        }
}

/**
 * Atomic action to checkout a guest.
 * It requires that the room be occupied by that guest.
 */
act checkout[g: Guest,
                                        occupant: Room -> Guest] {
        pre { some occupant.g }
        post {
                occupant' = occupant - Room->g
        }
}

/**
 * Atomic action that consists to deliver the room's key to the guest.
 * It requires that the rooms haven't a guest
 */
act checkin[g: Guest,
                                        r: Room,
                                        k: Key,
                                        lastKey: Room -> Key,
                                        occupant: Room -> Guest,
                                        guestKeys: Guest -> Key] {
        pre { no r.occupant and k = nextKey[r.lastKey, r.keys] }
        post {
                guestKeys' = guestKeys + (g->k)
                occupant' = occupant + r->g
                lastKey' = lastKey ++ r->k
        }
}

/**
 * This predicate is to check that no unauthorized entries can occur.
 */
pred noBadEntry[g: Guest, r: Room, occupant: Room -> Guest] {
        let o = r.occupant | some o => g in o
}

/**
* Atomic action that non deterministically chooses an object from a set. 
*/
act nondet[e: univ, s: univ] {
        pre { some s }
        post { e' in s }
}

/**
 * Program to realize the actions of the hotel problem.
 * First, non deterministically choose one Guest, one Room and one key.
 * Use the choice selection to realize a checkin, checkout and entry and use * to iterate
 */
program noBadEntryProg[g: Guest,
                                        r: Room,
                                        k: Key,
                                        currentKey: Room -> Key,
                                        lastKey: Room -> Key,
                                        occupant: Room -> Guest,
                                        guestKeys: Guest -> Key,
                                        prop: Bool] {
                (nondet[g, Guest]; nondet[r, Room]; nondet[k, Key];
                (checkin[g, r, k, lastKey, occupant, guestKeys] +
                checkout[g, occupant] +
                entry[g, r, k, currentKey, occupant, guestKeys, prop]))*
}

/**
 * Program to show the hotel problem.
 * Starts assuming the initial state and, then, call to the program that realize 
 * the actions of the problem.
 */
program show[g: Guest,
                                        r: Room,
                                        k: Key,
                                        currentKey: Room -> Key,
                                        lastKey: Room -> Key,
                                        occupant: Room -> Guest,
                                        guestKeys: Guest -> Key,
                                        prop: Bool] {
                assume (init[currentKey, lastKey, occupant, guestKeys] and prop = True );
                call noBadEntryProg[g, r, k, currentKey, lastKey, occupant, guestKeys, prop]
}


run show for 3 but 2 Room, 2 Guest lurs exactly 4

/**
 * This assertion states that once an entry is made, it is authorized
 */
assertCorrectness BadSafety[g: Guest,
                                        r: Room,
                                        k: Key,
                                        currentKey: Room -> Key,
                                        lastKey: Room -> Key,
                                        occupant: Room -> Guest,
                                        guestKeys: Guest -> Key,
                                        prop: Bool] {
        pre { init[currentKey, lastKey, occupant, guestKeys] and prop = True }
        program {
                call noBadEntryProg[g, r, k, currentKey, lastKey, occupant, guestKeys, prop]
        }
        post { prop' = True }
}


// After adding the NoIntervening fact,
// these commands no longer generate counterexamples

check BadSafety for 3 but 2 Room, 2 Guest lurs 5

check BadSafety for 4 but 3 Room, 3 Guest lurs 5

check BadSafety for 6 but 5 Room, 5 Guest lurs 5

check BadSafety for 11 but 10 Room, 10 Guest lurs 5

check BadSafety for 16 but 15 Room, 15 Guest lurs 5

/**
 * Program to check that there are not intervening between checkin guest and entry guest.
 */
program noBadEntryNonInterveningProg[g: Guest,
                                        r: Room,
                                        k: Key,
                                        currentKey: Room -> Key,
                                        lastKey: Room -> Key,
                                        occupant: Room -> Guest,
                                        guestKeys: Guest -> Key,
                                        prop: Bool] {
                (
                 (nondet[g, Guest]; nondet[r, Room]; nondet[k, Key];
                  checkin[g, r, k, lastKey, occupant, guestKeys];
                  entry[g, r, k, currentKey, occupant, guestKeys, prop]
        ) +
                (nondet[g, Guest];
                 checkout[g, occupant]
        ) +
        (nondet[g, Guest]; nondet[r, Room]; nondet[k, Key];
                 entry[g, r, k, currentKey, occupant, guestKeys, prop]
        )
       )*
}

/**
 * This assertion states that that there is no intervening event between a 
 * check in of guest and entry of guest. 
 */
assertCorrectness GoodSafety[g: Guest,
                                        r: Room,
                                        k: Key,
                                        currentKey: Room -> one Key,
                                        lastKey: Room -> one Key,
                                        occupant: Room -> lone Guest,
                                        guestKeys: Guest -> set Key,
                                        prop: Bool] {
        pre { init[currentKey, lastKey, occupant, guestKeys] and prop = True }
        program {
                call noBadEntryNonInterveningProg[g, r, k, currentKey, lastKey, occupant, guestKeys, prop]
        }
        post { prop' = True }
}

check GoodSafety for 3 but 2 Room, 2 Guest lurs 10
check GoodSafety for 4 but 3 Room, 3 Guest lurs 10
check GoodSafety for 5 but 4 Room, 4 Guest lurs 10
